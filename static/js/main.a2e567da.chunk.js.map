{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","title","className","totalTours","App","Component","handleRemoveTour","id","console","log","database","ref","child","remove","state","tours","on","snapshot","val","data","newToursAarray","inventoryName","toursObject","name","seats","date","push","setState","this","length","map","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAgBAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECbMS,G,MAAS,SAACC,GACd,OACE,gCACE,gCAAMA,EAAMC,MAAZ,KACA,0BAAMC,UAAU,SAAhB,iBAAuCF,EAAMG,WAA7C,QAmISC,GAzGOC,Y,kDAuCpB,aAAe,IAAD,8BACZ,gBAmCFC,iBAAmB,SAACC,GAClBC,QAAQC,IAAIF,GACEjB,EAASoB,WAAWC,MAC5BC,MAAML,GAAIM,UArChB,EAAKC,MAAQ,CACXC,MAAO,IAHG,E,gEAOO,IAAD,OACJzB,EAASoB,WAAWC,MAE5BK,GAAG,SAAS,SAACC,GACjBT,QAAQC,IAAIQ,EAASC,OAErB,IAAMC,EAAOF,EAASC,MAEhBE,EAAiB,GAEvB,IAAK,IAAIC,KAAiBF,EAAM,CAC9B,IAAMG,EAAc,CAClBf,GAAIc,EACJN,MAAOI,EAAKE,GACZE,KAAMJ,EAAKE,GAAeE,KAC1BC,MAAOL,EAAKE,GAAeG,MAC3BC,KAAMN,EAAKE,GAAeI,MAE5BL,EAAeM,KAAKJ,GAGtBd,QAAQC,IAAI,gCAAiCW,GAE7C,EAAKO,SAAS,CACZZ,MAAOK,S,+BAWH,IAAD,OACP,OACE,yBAAKlB,UAAU,YACb,kBAAC,EAAD,CAAQD,MAAM,iBAAiBE,WAAYyB,KAAKd,MAAMC,MAAMc,SAC3DD,KAAKd,MAAMC,MAAMe,KAAI,SAACR,GACrB,OACE,wBAAIS,IAAKT,EAAYf,IACnB,4BACE,4BAAQyB,QAAS,kBAAM,EAAK1B,iBAAiBgB,EAAYf,MAAzD,MAIF,4BAAKe,EAAYC,MACjB,4BAAKD,EAAYG,MACjB,4BAAKH,EAAYE,gB,GAzDbnB,cC7DE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.a2e567da.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAvmOCITwc2n7AfUZxmsvSg3Oh9vxiB6BM\",\n    authDomain: \"tours-inventory.firebaseapp.com\",\n    databaseURL: \"https://tours-inventory.firebaseio.com\",\n    projectId: \"tours-inventory\",\n    storageBucket: \"tours-inventory.appspot.com\",\n    messagingSenderId: \"227516769907\",\n    appId: \"1:227516769907:web:63ecc0d66b794542512c06\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nimport \"./App.css\";\n\nconst Header = (props) => {\n  return (\n    <header>\n      <h1> {props.title} </h1>\n      <span className=\"stats\"> Total tours: {props.totalTours} </span>\n    </header>\n  );\n};\n\n// LISTING THE TOUR WITH DETAILS\n// const Tour = (props) => {\n//   return (\n//     <div className=\"player\">\n//       <span className=\"name\">{props.name}</span>\n//       <span className=\"date\"> {props.date} </span>\n//       <span className=\"seats\"> {props.seats} </span>\n//       <Dates />\n//       <Counter />\n//     </div>\n//   );\n// };\n\nconst Dates = (props) => {\n  return (\n    <div className=\"date\">\n      <span className=\"date\"> {props.date} </span>\n    </div>\n  );\n};\n\nclass Counter extends Component {\n  state = {\n    score: 0,\n  };\n\n  incrementScore = () => {\n    this.setState((prevState) => ({\n      score: prevState.score + 1,\n    }));\n  };\n\n  decrementScore = () => {\n    this.setState((prevState) => ({\n      score: prevState.score - 1,\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"counter\">\n        <button\n          className=\"counter-action decrement\"\n          onClick={this.decrementScore}\n        >\n          -\n        </button>\n        <span className=\"counter-score\"> {this.state.score} </span>\n        <button\n          className=\"counter-action increment\"\n          onClick={this.incrementScore}\n        >\n          +\n        </button>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tours: [],\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      console.log(snapshot.val());\n\n      const data = snapshot.val();\n\n      const newToursAarray = [];\n\n      for (let inventoryName in data) {\n        const toursObject = {\n          id: inventoryName,\n          tours: data[inventoryName],\n          name: data[inventoryName].name,\n          seats: data[inventoryName].seats,\n          date: data[inventoryName].date,\n        };\n        newToursAarray.push(toursObject);\n      }\n\n      console.log(\"there are updates in database\", newToursAarray);\n\n      this.setState({\n        tours: newToursAarray,\n      });\n    });\n  }\n\n  handleRemoveTour = (id) => {\n    console.log(id);\n    const dbRef = firebase.database().ref();\n    dbRef.child(id).remove();\n  };\n\n  render() {\n    return (\n      <div className=\"tourlist\">\n        <Header title=\"Tour Inventory\" totalTours={this.state.tours.length} />\n        {this.state.tours.map((toursObject) => {\n          return (\n            <ul key={toursObject.id}>\n              <li>\n                <button onClick={() => this.handleRemoveTour(toursObject.id)}>\n                  X\n                </button>\n              </li>\n              <li>{toursObject.name}</li>\n              <li>{toursObject.date}</li>\n              <li>{toursObject.seats}</li>\n              {/* {toursObject.id} */}\n            </ul>\n          );\n        })}\n      </div>\n    );\n  }\n}\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}