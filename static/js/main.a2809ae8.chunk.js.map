{"version":3,"sources":["firebase.js","NoteForm/NewTourForm.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NewTourForm","props","handleUserInput","e","setState","newTourName","target","value","handleDateInput","newTourDate","handleTourDuration","newTourDuration","handleTourSeats","newTourSeats","writeNote","addTour","state","className","type","placeholder","this","onChange","onClick","Component","Header","title","totalTours","App","handleRemoveTour","id","database","child","remove","toursObjectName","toursObjectDate","toursObjectDuration","toursObjectSeats","push","set","name","date","duration","seats","ref","tours","on","snapshot","console","log","val","data","newToursAarray","inventoryName","toursObject","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2809ae8.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAvmOCITwc2n7AfUZxmsvSg3Oh9vxiB6BM\",\n    authDomain: \"tours-inventory.firebaseapp.com\",\n    databaseURL: \"https://tours-inventory.firebaseio.com\",\n    projectId: \"tours-inventory\",\n    storageBucket: \"tours-inventory.appspot.com\",\n    messagingSenderId: \"227516769907\",\n    appId: \"1:227516769907:web:63ecc0d66b794542512c06\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\nimport \"./NewTourForm.css\";\n\nclass NewTourForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTourName: \"\",\n      newTourDate: \"\",\n      newTourDuration: \"\",\n      newTourSeats: \"\",\n    };\n  }\n\n  // getting the value from text input box\n  handleUserInput = (e) => {\n    this.setState({\n      newTourName: e.target.value,\n    });\n  };\n  // getting the value from text input box\n  handleDateInput = (e) => {\n    this.setState({\n      newTourDate: e.target.value,\n    });\n  };\n  handleTourDuration = (e) => {\n    this.setState({\n      newTourDuration: e.target.value,\n    });\n  };\n\n  handleTourSeats = (e) => {\n    this.setState({\n      newTourSeats: e.target.value,\n    });\n  };\n\n  writeNote = () => {\n    // call a method that sets the noteContent for a note to\n    // the value of the input\n    this.props.addTour(\n      this.state.newTourName,\n      this.state.newTourDate,\n      this.state.newTourDuration,\n      this.state.newTourSeats\n    );\n\n    // Set newTourName back tâ‰¤o an empty string.\n    this.setState({\n      newTourName: \"\",\n      newTourDate: \"\",\n      newTourDuration: \"\",\n      newTourSeats: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"inputformWrapper\">\n        <input\n          type=\"text\"\n          className=\"noteInput\"\n          placeholder=\"Add tour name\"\n          value={this.state.newTourName}\n          onChange={this.handleUserInput}\n        />\n        <div className=\"inputParamsWrapper\">\n          <input\n            type=\"date\"\n            className=\"dateInput\"\n            value={this.state.newTourDate}\n            onChange={this.handleDateInput}\n          />\n          <input\n            type=\"datetime\"\n            className=\"dateInput\"\n            placeholder=\"hrs\"\n            value={this.state.newTourDuration}\n            onChange={this.handleTourDuration}\n          />\n          <input\n            type=\"number\"\n            className=\"dateInput\"\n            placeholder=\"pax\"\n            value={this.state.newTourSeats}\n            onChange={this.handleTourSeats}\n          />\n          <button className=\"noteButton\" onClick={this.writeNote}>\n            Add\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NewTourForm;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport NoteForm from \"./NoteForm/NewTourForm.jsx\";\nimport \"./App.css\";\n\nconst Header = (props) => {\n  return (\n    <header>\n      <h1> {props.title} </h1>\n      <span className=\"stats\"> Total tours: {props.totalTours} </span>\n      <ul>\n        <li> Tour Name </li>\n        <li> Date </li>\n        <li> Duration </li>\n        <li> Seats Total </li>\n      </ul>\n    </header>\n  );\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.database = firebase.database().ref();\n    this.state = {\n      tours: [],\n    };\n  }\n\n  // **************************\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      console.log(snapshot.val());\n\n      const data = snapshot.val();\n\n      const newToursAarray = [];\n\n      for (let inventoryName in data) {\n        const toursObject = {\n          id: inventoryName,\n          tours: data[inventoryName],\n          name: data[inventoryName].name,\n          seats: data[inventoryName].seats,\n          date: data[inventoryName].date,\n          duration: data[inventoryName].duration,\n        };\n        newToursAarray.push(toursObject);\n      }\n\n      console.log(\"there are updates in database\", newToursAarray);\n\n      this.setState({\n        tours: newToursAarray,\n      });\n    });\n  }\n\n  // **********REMOVING ADN ADDING TOURS****************\n  handleRemoveTour = (id) => {\n    this.database.child(id).remove();\n  };\n\n  addTour = (\n    toursObjectName,\n    toursObjectDate,\n    toursObjectDuration,\n    toursObjectSeats\n  ) => {\n    // console.log(toursObject);\n    this.database.push().set({\n      name: toursObjectName,\n      date: toursObjectDate,\n      duration: toursObjectDuration,\n      seats: toursObjectSeats,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"tourlist\">\n        <Header title=\"Tour Inventory\" totalTours={this.state.tours.length} />\n        {this.state.tours.map((toursObject) => {\n          return (\n            <ul className=\"inventoryItem\" key={toursObject.id}>\n              <li>\n                <button onClick={() => this.handleRemoveTour(toursObject.id)}>\n                  X\n                </button>\n                {toursObject.name}\n              </li>\n              <li>{toursObject.date}</li>\n              <li>{toursObject.duration} hrs</li>\n              <li>{toursObject.seats}</li>\n            </ul>\n          );\n        })}\n        <NoteForm addTour={this.addTour} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}